---
title: "Assignment 3 Code"
author: "Max Seward"
format: html
editor: visual
---

```{r}
##load packages for data import and cleaning

library(tidyverse)
library(haven)

#using haven to load dataset 
Data <- read_sav("P6003.A4.SAV")
view(Data) #visually inspecting data 
#data is already in long format, approriate for repeated measures/LMM analysis
```

Data loaded in, is already formatted as long data on visual inspection. Analysis window below

lme4

```{r}
library(flexplot) #loading packages for analyses
library(lme4)



#visualizing univariate distributions
flexplot(swl~1, data=Data) #satisfaction with life (SWL)
flexplot(tipm.E~1, data=Data) #extraversion
flexplot(tipm.N~1,data=Data) #neuroticism 
flexplot(id~1,data=Data) 
flexplot(day~1,data=Data)

flexplot(swl~tipm.E, data=Data) #visualizing single variable predictions
flexplot(swl~tipm.N, data=Data)


#visually, there are very clear clusters so we  want to consider mixed models

#flexplot above for ID looks wrong. Now mutating ID to a factor variable so that it is not interpreted as continious numerical variable by flexplot / lmer

Data <- Data %>% mutate(id = factor(id))
flexplot(id~1, data=Data)
#baseline linear mixed model - outcome with random intercept, no predictors using lme4

#Standardizing predictors, as learned in lab 10: this way all coefficients are on same scale and it is easier to compare effect sizes when time to interpret the model

Data$tipm.E2<- scale(Data$tipm.E, center =TRUE, scale =TRUE) #tipm.e
Data$tipm.N2<- scale(Data$tipm.N, center =TRUE, scale =TRUE) #neuro





#baseline linear mixed model - outcome with random intercept, no predictors using lme4
#baseline mode, ID is cluster variable : data is clustered beacuase of repeated measures in indviduals over time 

baseline_mod <- lmer(swl~1 + (1|id),data = Data)
summary(baseline_mod)


#get icc for baseline model using flexplot
icc(baseline_mod)
# icc is .74 (74% of variance due to clusters) so definitley LMM 

#create a reduced model for predictor variables i.e. only including them as fixed effects - series of nested models starts here : ADD fixed effect, compare, add random effect ,compare, etc.  

fixed_ext<-lmer(swl~ tipm.E2 + (1|id), data=Data)
summary(fixed_ext)

#compare baseline with added fixed slope for extraversion
model.comparison(baseline_mod,fixed_ext)

#fixed_ext is supported: now add extraversion as random slope
random_ext <- lmer(swl~tipm.E2 + (tipm.E2|id), data= Data)
summary(random_ext)

#compare
model.comparison(fixed_ext,random_ext) #random_ext is supported, NOW add neurot as fixed slope first

#add neuroticism as a fixed slope

fixed_neuro<- lmer(swl~tipm.E2 + tipm.N2 + (tipm.E2|id),data=Data)
summary(fixed_neuro)

#compare model with neuro added as a fixed effect

model.comparison(random_ext,fixed_neuro) #adding neuro is a better fit, continue!
#add neurot as random effect as well 
random_neuro<- lmer(swl~tipm.E2 + tipm.N2 + (tipm.E2+tipm.N2|id),data=Data)
summary(random_neuro)
#compare again

model.comparison(fixed_neuro,random_neuro) #comparing model with neuro as fixed and random vs only fixed - model with neuro as fixed and random is better fit by coefficients

#

### random_neuro is our full model, supported by nested model comparisons


```

Nested model comparison complete, now will visualize models to view relationships and diagnostics.

```{r}


 ###

#visualize final model (random_neuro) that was chosen after nested model comparison

visualize(random_neuro, plot ="model") #flexplot automatically plotting strongest predictor and binning by second predictor, showing fixed and random slop for extra version

#visualizing ext only in random sample of 5 cases
visualize(random_neuro, plot ="model", formula = swl~tipm.E2 |id, sample=5)
#same but for only neuroticism, now we can see a visualization of what fixed effect for neuroticism is, outside of the estimates which tell us it's negative
visualize(random_neuro, plot ="model", formula = swl~tipm.N2 |id, sample=5)

#visualize fixed and random slopes together EXTRAVERSION in sample of 100 cases: color lines are random slopes for each ID, black line is fixe effect
visualize(random_neuro, plot="model",
          formula=swl~tipm.E2 +id, sample = 10)


#finally, same visualization but for neuroticism
visualize(random_neuro, plot="model",
          formula=swl~tipm.N2 +id, sample = 10)


#now we have a good idea of what effects look like. Does look like hypothesis 1 and 2 are confirmed. Ext + assciated with swl, neurot is negatively associated.#will continue with summary and esitmates to get values for these relationships 

#diagnostics 
visualize(random_neuro, plot = "residuals") #they look good

check_collinearity(random_neuro) # checking for multicolinearity
```

```{r}
#model summary
summary(random_neuro) # some estimates from here

#flexplot estimates
flexplot:: estimates(random_neuro) ### this is the most important/helpful panel for interpretation

#load package for r2 vals
library(performance) #load package to get r2 values later
#r2 values using performance pkg
r2(random_neuro)


icc(random_neuro)
#export model summary to apa table
library(apaTables)

#mixed model output into table for writeup

library(sjPlot) #for journal quality tables for mixed models, INSTALL if needed

tab_model(random_neuro, file = "randomeffects.doc") # edit table after to include a mix of flexplot esitmates  and summary 

##descriptive stats and bivariate correlations. on all observations 

cortable<- select(Data, day, tipm.E,tipm.N,swl)

apa.cor.table(cortable,table.number =1, filename="A3cor.doc")

##plots for write up 
#extraversion
explot<- visualize(random_neuro, plot="model",
          formula=swl~tipm.E2 +id, sample = 5)+
          theme_classic() +
  labs(
    x = "Extraversion",  #  x-axis label
    y = "Satisfaction With Life"   #  y-axis label
  )

print(explot)

#plot for neurot

Nplot<-visualize(random_neuro, plot="model",
          formula=swl~tipm.N2 +id, sample = 5) +
          theme_classic()+
labs(
    x = "Neuroticism",  #  x-axis label
    y = "Satisfaction With Life"   #  y-axis label
  )

print(Nplot)

assumplot<- visualize(random_neuro, plot = "residuals")+ #plot for appendix
theme_classic()

print(assumplot)

#check

```
